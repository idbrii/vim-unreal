
snippet log "Unreal Log" b
UE_LOG(Log${1:Category}, ${2:Fatal,Error,Warning,Display,Log,Verbose,VeryVerbose}, ${3:TEXT("${4:FormatStr}")}, ${5:...});$0
endsnippet

snippet print "Unreal Print" b
UKismetSystemLibrary::PrintString(${1:Context (object in my world)}, ${2:FString::Printf(TEXT("${3:message}", ${4:...}))}${5:, ${6:bPrintToScreen}, ${7:bPrintToLog}, ${8:TextLinearColor}, ${9:Duration (negative uses config)}});$0
endsnippet

snippet str "Unreal string" w
${1:TCHAR const* ${2:name} = }TEXT("${3:string}")$0
endsnippet

snippet ctor "Unreal constructor with FObjectInitializer" b
${2:${1:F}`!p snip.rv = snip.basename`}`!p
if fn.endswith('.cpp'):
	snip.rv = '::'+ t[2]
	`(const FObjectInitializer& ObjectInitializer)`!p
if fn.endswith('.cpp'):
	snip.rv = '\n\t: Super(ObjectInitializer)\n\t'
`$0
endsnippet

snippet enum "Unreal old-school enum" b
UENUM()
namespace E${1:NameOfEnumeration}
{
	enum Type
	{
		${2:values}
		COUNT
	};
}$0
endsnippet

snippet enum "Unreal class enum" b
UENUM()
enum class E${1:NameOfEnumeration} : uint8
{
	${2:values},
	COUNT
}$0
endsnippet
